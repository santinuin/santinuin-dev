---
import Layout from "../layouts/Layout.astro";
import Button from "../components/Button.astro";
import DetailContainer from "../components/DetailContainer.astro";
import { getCollection } from "astro:content";

const sections = await getCollection("sections");
---

<Layout>
  <main>
    <h1>Santiago Nuñez Ingas</h1>

    <div class="buttons-container">
      {
        sections.map((section) => {
          const { slug, data } = section;
          const { title } = data;

          return <Button text={title.toUpperCase()} section={slug} />;
        })
      }
    </div>

    <div class="content-container">
      <DetailContainer title="Welcome to My Details Page!">
        <p>
          Here you can find more about my journey, skills, and interests.
          Click on the buttons above to explore different sections.
        </p>
      </DetailContainer>
    </div>
  </main>
</Layout>

<script define:vars={{ sections }}>
  function updateContent() {
    const urlParams = new URLSearchParams(window.location.search);
    const sectionSlug = urlParams.get("section");
    
    if (sectionSlug) {
      const section = sections.find((s) => s.slug === sectionSlug);
      
      if (section) {
        const sectionElement = document.getElementById("detail-container");
        if (sectionElement) {
          const titleElement = sectionElement.querySelector("h2");
          if (titleElement) {
            titleElement.textContent = section.data.title;
          }
          
          const contentArea = sectionElement.querySelector("p");
          if (contentArea) {
            contentArea.textContent = section.body;
          }
          
          // Actualiza el título del navegador
          document.title = `${section.data.title} | santinuin.dev`;
          
          // Scroll suave hacia el contenido
          sectionElement.scrollIntoView({ behavior: "smooth" });
        }
      }
    }
  }

  // Ejecuta al cargar la página
  document.addEventListener("DOMContentLoaded", updateContent);
  
  // Escucha los cambios de estado en el historial (cuando cambia la URL)
  window.addEventListener("popstate", updateContent);
  
  // Observa cambios en la URL provocados por los botones
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.type === "attributes" && mutation.attributeName === "href") {
        updateContent();
      }
    });
  });
  
  // Configuración adicional para detectar cambios de URL cuando se usa pushState
  const originalPushState = history.pushState;
  history.pushState = function() {
    originalPushState.apply(this, arguments);
    updateContent();
  };
</script>

<style>
  main {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
    max-width: 800px;
    margin: auto;
  }

  .buttons-container {
    display: flex;
    justify-content: center;
    margin-top: 2rem;
    flex-wrap: wrap;
    gap: 1rem;
    padding: 0 1rem;
  }

  .content-container {
    max-width: 800px;
    margin: auto;
    padding: 2rem;
    text-align: center;
  }
</style>
